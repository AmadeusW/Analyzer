@page "/fetchdata"
@using Analyzer.Blazor.Data
@inject DataService DataService

<h1>Logged Data</h1>

@if (filteredData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>
        Search: <input type="text" placeholder="filter" bind-value-oninput="@filter"/>
    </p>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Name</th>
                <th>Value</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in filteredData)
            {
                <tr>
                    <td>@item.TimeStamp</td>
                    <td>@item.Name</td>
                    <td>@item.Value</td>
                    <td></td>
                </tr>
            }
            <tr>
                <td></td>
                <td><input type="text" placeholder="name" @bind="@newKey" /> </td>
                <td><input type="text" placeholder="name" @bind="@newValue" /> </td>
                <td><input type="button" @onclick="SetData">Set</input></td>
            </tr>
        </tbody>
    </table>
}

@code {
    LoggedData[] filteredData;
    string _filter = string.Empty;
    // TODO: can I get rid of this code and use binding in foreach?
    string filter {
        get {
            return _filter;
        }
        set {
            _filter = value;
            filteredData = DataService.GetFilteredData(value);
        }
    }
    string newKey = string.Empty;
    string newValue = string.Empty;

    protected override async Task OnInitAsync()
    {
        DataService.OnDataUpdated += DataUpdatedHandler;
        filteredData = DataService.GetFilteredData(filter);
    }

    private void SetData()
    {
        DataService.Set(newKey, newValue);
    }

    private void DataUpdatedHandler(object sender, EventArgs e)
    {
        filteredData = DataService.GetFilteredData(filter);
    }
}
