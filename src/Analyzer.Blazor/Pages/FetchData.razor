@page "/fetchdata"
@using Analyzer.Blazor.Data
@inject DataService DataService
@inject IJSRuntime JsRuntime;

<h1>Logged Data</h1>

@if (DataSnapshot == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>
        Search: <input type="text" placeholder="filter" @bind-value="@filter" @bind-value:event="oninput" />
    </p>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Name</th>
                <th>Value</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in FilteredData)
            {
                <tr>
                    <td>@item.TimeStamp</td>
                    <td>@item.Name</td>
                    <td>@item.Value</td>
                    <td></td>
                </tr>
            }
            <tr>
                <td></td>
                <td><input type="text" placeholder="name" @bind="@newKey" /> </td>
                <td><input type="text" placeholder="name" @bind="@newValue" /> </td>
                <td><input type="button" @onclick="SetData" value="Set" style="width: 60px" /> </td>
            </tr>
        </tbody>
    </table>
}

@code {
    LoggedData[] DataSnapshot { get; set; }
    LoggedData[] FilteredData
    {
        get
        {
            var f = filter.Trim().ToLowerInvariant();
            if (string.IsNullOrEmpty(f))
                return DataSnapshot;

            return DataSnapshot
                .Where(n => n.Name.Contains(f) || n.Value.ToString().Contains(f))
                .ToArray();
        }
    }
    string filter { get; set; } = string.Empty;
    /*
        // TODO: can I get rid of this code and use binding in foreach?
        string filter {
            get {
                return _filter;
            }
            set {
                _filter = value;
                DataSnapshot = DataService.GetData(value);
            }
        }
        */
    string newKey = string.Empty;
    string newValue = string.Empty;

    protected override async Task OnInitAsync()
    {
        DataSnapshot = DataService.GetData();
        DataService.OnDataUpdated += DataUpdatedHandler;
    }

    private void SetData()
    {
        // This is an unnecessarily long way to call
        // JS -> SignalR -> Clients
        JsRuntime.InvokeAsync<bool>("setClicked", newKey, newValue);
    }

    private void DataUpdatedHandler(object sender, EventArgs e)
    {
        DataSnapshot = DataService.GetData();
        this.Invoke(() => this.StateHasChanged());
    }
}
